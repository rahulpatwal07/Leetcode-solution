class Solution {
    int mod = 1e9+7;
    int dfs(int node, vector<vector<pair<int,int>>>& adj,vector<int>&dist,vector<int>&dp){
        if(node==dist.size()-1){
            return 1;
        }
        if(dp[node]!=-1){
            return dp[node];
        }
        long long cnt = 0;
        for(auto it : adj[node]){
            if(dist[it.first] < dist[node]){
                cnt += dfs(it.first,adj,dist,dp)%mod;
                cnt %= mod;
            }
        }
        return dp[node] = (int)cnt;
    }
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<vector<pair<int,int>>> adj(n+1);
        for(auto it : edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<int> dist(n+1,INT_MAX);
        dist[n] = 0;
        pq.push({0,n});
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            int wt = it.first;
            int node = it.second;
            for(auto it: adj[node]){
                if(dist[it.first] > wt + it.second){
                    dist[it.first] = wt + it.second;
                    pq.push({dist[it.first],it.first});
                }
            }
        }
        int cnt = 0;
        vector<int> dp(n+1,-1);
        dp[n] = 1;
        return dfs(1,adj,dist,dp);
        
    }
};
