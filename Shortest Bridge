class Solution {
public:
   void DFS(int start,int end, vector<vector<int>> &vis, vector<vector<int>>&grid, queue<pair<int,pair<int,int>>>& q)
    {
        vis[start][end] = 1;
        q.push({0,{start,end}});
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
        for(int i=0;i<4;i++)
        {
            int nrow = start + delrow[i];
            int ncol = end + delcol[i];
            if(nrow >=0 && nrow < grid.size() && ncol >=0 && ncol < grid[0].size() && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1)
            DFS(nrow,ncol,vis,grid,q);
              
        }
    

    }
    int shortestBridge(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        vector<vector<int>> vis(row,vector<int>(col,0));
        int startrow = 0, startcol = 0;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j] == 1)
                {
                    startrow = i;
                    startcol = j;
                    break;
                }
            }
        }
        queue<pair<int,pair<int,int>>> q;
        DFS(startrow,startcol,vis,grid,q);
        

        while(!q.empty()){
            auto it = q.front();
            int steps = it.first;
            int rows = it.second.first;
            int col = it.second.second;
            int delrow[] = {-1,0,1,0};
            int delcol[] = {0,1,0,-1};
            q.pop();
            for(int i=0;i<4;i++)
            {
             int nrow = rows + delrow[i];
             int ncol = col + delcol[i];
             if(nrow>=0 && nrow<grid.size() && ncol>=0 && ncol<grid[0].size() && !vis[nrow][ncol] ){
                        vis[nrow][ncol]=1;
                        q.push({steps +1 ,{nrow,ncol}});
                        if(grid[nrow][ncol]==1){
                            return steps;
                        }
                }
            }
        }
        return -1;
    
    }
};
