class Solution {
    int dr[3] = {0,-1,1};
    int mx = 0;
    void dfs(vector<vector<int>>& grid,vector<vector<int>>& vis,int x, int y,int dis){
        mx = max(mx,dis);
        for(int i=0; i<3; i++){
            int nx = x + dr[i];
            int ny = y + 1;
            if(nx>=0 && nx<grid.size() && ny>=0 && ny<grid[0].size() && grid[nx][ny] > grid[x][y] && vis[nx][ny] < dis+1){
                vis[nx][ny] = dis+1;
                dfs(grid,vis,nx,ny,dis+1);
            }
        }
    }
public:
    int maxMoves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        for(int i=0; i<m; i++){
            dfs(grid,vis,i,0,0);
        }
        return mx;
    }
};
