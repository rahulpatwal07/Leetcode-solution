class Solution {
    int dr[8] = {-1,1,0,0,1,1,-1,-1};
    int dc[8] = {0,0,1,-1,1,-1,-1,1};
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> vis(n,vector<int>(n,0));
        queue<pair<int,pair<int,int>>> q;
        q.push({1,{0,0}});
        vis[0][0] = 1;
        if(grid[n-1][n-1]==1 || grid[0][0]==1){
            return -1;
        }
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int x = it.second.first;
            int y = it.second.second;
            int dis = it.first;
            if(x==n-1 && y==n-1){
                return dis;
            }
            for(int i=0; i<8; i++){
                int nx = x + dr[i];
                int ny = y + dc[i];
                if(nx>=0 && nx<n && ny>=0 && ny<n && vis[nx][ny]==0 && grid[nx][ny]==0){
                    vis[nx][ny] = 1;
                    q.push({dis+1,{nx,ny}});
                }
            }
        }
        return -1;
    }
};
