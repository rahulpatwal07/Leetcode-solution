class Solution {
    bool bfs(int node, vector<vector<int>> & graph,vector<int> &color){
        color[node] = 0;
        queue<int> q;
        q.push(node);
        while(!q.empty()){
            int no = q.front();
            q.pop();
            for(auto it: graph[no]){
                if(color[it]==-1){
                    color[it] = !color[no];
                    q.push(it);
                }
                else if(color[it]==color[no]){
                    return false;
                }
            }
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        // queue<int> q;
        vector<int> color(n,-1);
        for(int i=0; i<n; i++){
            if(color[i]==-1){
                if(!bfs(i,graph,color)){
                    return false;
                }
            }
        }
        return true;
    }
};
