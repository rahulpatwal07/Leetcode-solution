class Solution {
private:
    void dfs(int node, vector<vector<int>> &adj, vector<bool> &visited){
        visited[node] = true;
        for(int v : adj[node]){
            if(!visited[v]){
                dfs(v, adj, visited);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<vector<int>> adj(n, vector<int>());
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i==j) continue;
                
                if(isConnected[i][j]){
                    adj[i].push_back(j);
                }
            }
        }
        
        vector<bool> visited(n, false);
        int count = 0;
        
        for(int i=0; i<n; i++){
            if(!visited[i]){
                dfs(i, adj, visited);
                count++;
            }
        }
        
        return count;
    }
};
