class Solution {
    int dfs(int node,vector<vector<int>>& adj,vector<int>& vis){
        vis[node] = 1;
        int cnt = 1;
        for(auto it : adj[node]){
            if(!vis[it]){
               cnt += dfs(it,adj,vis);
            }
        }
        return cnt;
    }
public:
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        vector<vector<int>> adj(n);
        for(int i=0; i<bombs.size(); i++){
            for(int j=i+1; j<bombs.size(); j++){
                int x1 = bombs[i][0];
                int y1 = bombs[i][1];
                int r1 = bombs[i][2];

                int x2 = bombs[j][0];
                int y2 = bombs[j][1];
                int r2 = bombs[j][2];
                double dist = sqrt(1.0*pow(x1-x2,2) + 1.0*pow(y1-y2,2));

                if(r1 >= dist){
                    adj[i].push_back(j);
                }
                if(r2 >= dist){
                    adj[j].push_back(i);
                }
            }
        }
        // for(int i=0; i<n; i++){
        //     cout<<i<<"->";
        //     for(int j=0; j<adj[i].size(); j++){
        //         cout<<adj[i][j]<<" ";
        //     }cout<<endl;
        // }
        int mx = 0;
        for(int i=0; i<n; i++){
            vector<int> vis(n,0);
            mx = max(mx,dfs(i,adj,vis));
        }
        return mx;


    }
};
