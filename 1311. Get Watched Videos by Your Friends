class Solution {
    static bool cmp(pair<int,string>& a, pair<int,string>&b){
        if(a.first==b.first){
            return a.second < b.second;
        }
        return a.first < b.first;
    }
public:
    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        queue<pair<int,int>> q;
        q.push({id,0});
        vector<pair<int,string>> v;
        vector<int> vis(friends.size(),0);
        vector<int> kthFriends;
        vis[id] = 1;
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int id1 = it.first;
            int level1 = it.second;
            if(level1==level){
                kthFriends.push_back(id1);
            }
            else if(level1<level){
                 for(auto it : friends[id1]){
                    if(vis[it]==0){
                        vis[it] = 1;
                        q.push({it,level1+1});
                    }
                }
            }

        }
        unordered_map<string,int> mp;
        for(auto it : kthFriends){
            for(auto movie : watchedVideos[it]){
                mp[movie]++;
            }
        }
        for(auto it : mp){
            v.push_back({it.second,it.first});
        }
        sort(v.begin(),v.end(),cmp);
        vector<string> ans;
        for(auto it : v){
            ans.push_back(it.second);
        } 
        return ans;
    }
};
