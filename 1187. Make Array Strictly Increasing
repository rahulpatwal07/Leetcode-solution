class Solution {
    int solve(vector<int>&arr1,vector<int>&arr2, int i, int last,vector<unordered_map<int,int>>& dp){
        if(i==arr1.size()){
            return 0;
        }
        if(dp[i].find(last)!=dp[i].end()){
            return dp[i][last];
        }
        int first = INT_MAX, second = INT_MAX;
        if(last < arr1[i]){
            first = solve(arr1,arr2,i+1,arr1[i],dp);
        }

        int index = upper_bound(arr2.begin(),arr2.end(),last) - arr2.begin();
        if(index < arr2.size()){
            second = solve(arr1,arr2,i+1,arr2[index],dp);
        }
        if(second == INT_MAX){
            return dp[i][last] = first;
        }
        dp[i][last] = min(first,1+second);
        return min(first,1+second);
    }
public:
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        sort(arr2.begin(),arr2.end());
        int mx = *max_element(arr1.begin(),arr1.end());
        mx = max(mx,arr2[arr2.size()-1]);
        vector<unordered_map<int,int>> dp(arr1.size());
        int ans = solve(arr1,arr2,0,-1,dp);
        if(ans==INT_MAX)return -1;
        return ans;
    }
};
