class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> distance(m,vector<int>(n,INT_MAX));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>pq;
        pq.push({0,{0,0}});
        distance[0][0] = 0;
        int dr[4] = {0,0,1,-1};
        int dc[4] = {1,-1,0,0};
        int ans = 1e9;
        while(pq.size()){
            auto it = pq.top();
            pq.pop();
            int x = it.second.first;
            int y = it.second.second;
            int dis = it.first;
            for(int i=0; i<4; i++){
                int nx = x + dr[i];
                int ny = y + dc[i];
                int cst = i+1==grid[x][y] ? 0 : 1;
                if(nx>=0 && ny>=0 && nx<m && ny<n && distance[nx][ny] > dis+cst){
                    distance[nx][ny] = dis+cst;
                    pq.push({dis+cst,{nx,ny}});
                }
            }
        }
        return distance[m-1][n-1];
    }
};
