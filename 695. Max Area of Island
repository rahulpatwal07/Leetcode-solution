class Solution {
    int dr[4] = {0,0,1,-1};
    int dc[4] = {1,-1,0,0};
    int dfs(int x, int y,vector<vector<int>>& grid,vector<vector<int>>& vis){
        vis[x][y] = 1;
        int cnt = 1;
        for(int i=0; i<4; i++){
            int nx = x + dr[i];
            int ny = y + dc[i];
            if(nx>=0 && nx<grid.size() && ny>=0 && ny<grid[0].size() && grid[nx][ny]==1 && vis[nx][ny]==0){
                cnt += dfs(nx,ny,grid,vis);
            }
        }
        return cnt;
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ar = 0;
        int m = grid.size();
        int n = grid[0].size();
        int mx = 0;
        vector<vector<int>> vis(m,vector<int>(n,0));
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!vis[i][j] && grid[i][j]==1){
                    mx = max(mx,dfs(i,j,grid,vis));
                }
            }
        }
        return mx;
    }
};
