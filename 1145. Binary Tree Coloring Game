/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* findNode(TreeNode* root, int x){
        if(root==nullptr){
            return nullptr;
        }
        if(root->val==x){
            return root;
        }
        TreeNode* l = findNode(root->left,x);
        TreeNode* r = findNode(root->right,x);
        if(l){
            return l;
        }
        if(r){
            return r;
        }
        return nullptr;
    }
    int countNode(TreeNode* root){
        if(root==nullptr){
            return 0;
        }
        int l = countNode(root->left);
        int r = countNode(root->right);
        return 1 + l + r;
    }
public:
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        TreeNode* start = findNode(root,x);
        int left = countNode(start->left);
        int right = countNode(start->right);
        int parentNode = n - left - right - 1;
        int mx = max(left,max(right,parentNode));
        int mn = min(left,min(right,parentNode));
        int mid = left + right + parentNode - mn - mx;
        if(mx > mn+mid+1){
            return true;
        }
        return false;
    }
};
