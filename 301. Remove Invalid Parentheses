class Solution {
    int count(string s){
        stack<char> st;
        for(int i=0; i<s.length(); i++){
            if(s[i]=='(') st.push(s[i]);
            else if(s[i]==')'){
                if(!st.empty() && st.top()=='('){
                    st.pop();
                }
                else{
                    st.push(s[i]);
                }
            }
        }
        return st.size();
    }
    set<string> st;
    unordered_map<string,int> dp;
    int sz;
    int solve(string& s,int cnt){
        if(cnt==0){
            int temp = count(s);
            if(temp==0){
                st.insert(s);
                return 1;
            }
            return 0;
        }
        if(dp.find(s)!=dp.end()){
            return dp[s];
        }
        for(int i=0;i<s.size();i++){
            if(s[i]==')'||s[i]=='('){
                string left = s.substr(0,i);
                string right = s.substr(i+1);
                string final = left+right;
                dp[final] = solve(final,cnt-1);
            }
        }
        return dp[s];
    }
public:
    vector<string> removeInvalidParentheses(string s) {
        int cnt = count(s);
        sz = 0;
        solve(s,cnt);
        vector<string> ans;
        for(auto it : st){
            ans.push_back(it);
        }
        return ans;
    }
};
