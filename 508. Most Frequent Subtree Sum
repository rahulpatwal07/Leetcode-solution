/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int solve(TreeNode* root,unordered_map<int,int> &mp){
        if(root==nullptr){
            return 0;
        }
        int l = solve(root->left,mp);
        int r = solve(root->right,mp);
        mp[l+r+root->val]++;
        return l+r+root->val;

    }
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> v;
        unordered_map<int,int> mp;
        solve(root,mp);
        int mx = 0;
        for(auto it: mp){
            mx = max(mx,it.second);
        }
        vector<int> ans;
        for(auto it : mp){
            if(it.second==mx){
                ans.push_back(it.first);
            }
        }
        return ans;
    }
};
