/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = new ListNode();
        ListNode* head = new ListNode();

        int temp1 = l1->val;
        int temp2 = l2->val;
        int value = temp1+temp2;
        int carry = (value)/10;
        ans->val = value%10;
        head = ans;
        l1 = l1->next;
        l2 = l2->next;
        while(l1!=nullptr && l2!=nullptr){
            ListNode* temp = new ListNode();
            temp1 = l1->val;
            temp2 = l2->val;
            value = temp1+temp2+carry;
            temp->val = (value)%10; 
            ans->next = temp;
            ans = temp;
            l1 = l1->next;
            l2 = l2->next;
            carry = (value)/10;
        }
        
        while(l1!=nullptr){
            ListNode* temp = new ListNode();
            temp1 = l1->val;
            value = temp1+carry;
            temp->val = (value)%10; 
             ans->next = temp;
            ans = temp;
            l1 = l1->next;
            carry = (value)/10;
        }
        
        while(l2!=nullptr){
            ListNode* temp = new ListNode();
            temp2 = l2->val;
            value = temp2+carry;
            temp->val = (value)%10; 
             ans->next = temp;
            ans = temp;
            l2 = l2->next;
            carry = (value)/10;
        }
        if(carry!=0){
            ListNode* temp = new ListNode();
            temp->val = carry;
            ans->next = temp;

        }
        return head;
    }
};
