class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        if(nums.size()==1){
            return 0;
        }
        int n = nums.size();
        unordered_map<int,int> mp1,mp2;
        priority_queue<pair<int,int>> pq1,pq2;
        for(int i=0; i<n; i+=2){
            mp1[nums[i]]++;
        }
        for(int i=1; i<n; i+=2){
            mp2[nums[i]]++;
        }
        for(auto it : mp1){
            pq1.push({it.second,it.first});
        }
        for(auto it : mp2){
            pq2.push({it.second,it.first});
        }
        if(pq1.top().second != pq2.top().second){
            return n - pq1.top().first - pq2.top().first;
        }
        auto p1 = pq1.top();
        auto p2 = pq2.top();
        pq1.pop();
        pq2.pop();
        int f = 0,s = 0;
        if(pq1.size()){
            f = pq1.top().first;
        }
        if(pq2.size()){
            s = pq2.top().first;
        }
        return n - max(p1.first+s,f+p2.first);
    }

};
