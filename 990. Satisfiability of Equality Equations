class disjointSet{
    public:
    vector<int> parent,size;
    disjointSet(int n){
        parent.resize(n);
        size.resize(n);
        for(int i=0; i<n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUParent(int u){
        if(parent[u]==u){
            return u;
        }
        return parent[u] = findUParent(parent[u]);
    }
    void Union(int u, int v){
        int p1 = findUParent(u);
        int p2 = findUParent(v);
        if(p1==p2){
            return ;
        }
        if(size[p1] > size[p2]){
            parent[p1] = p2;
            size[p2] += size[p1];
        }
        else{
            parent[p2] = p1;
            size[p1] += size[p2];
        }
    }
};
class Solution {
public:
    bool equationsPossible(vector<string>& eq) {
        disjointSet ds(26);
        for(int i=0; i<eq.size(); i++){
            int first = eq[i][0] - 'a';
            int second = eq[i][3] - 'a';
            if(eq[i][1]=='='){
                ds.Union(first,second);
            }
        }
        for(int i=0; i<eq.size(); i++){
            int first = eq[i][0] - 'a';
            int second = eq[i][3] - 'a';
            if(eq[i][1]=='!' && ds.findUParent(first) == ds.findUParent(second)){
                return false;
            }
        }
        
        return true;
    }
};
